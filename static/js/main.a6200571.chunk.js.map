{"version":3,"sources":["components/card.js","components/CardList.js","robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","username","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCeLK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCb5BM,EAAS,CACtB,CACAL,GAAI,EACJF,KAAM,wBACNY,SAAU,OACVX,MAAO,6BAEP,CACAC,GAAI,EACJF,KAAM,uBACNY,SAAU,QACVX,MAAO,4BAEP,CACAC,GAAI,EACJF,KAAM,yBACNY,SAAU,YACVX,MAAO,gCAEP,CACAC,GAAI,EACJF,KAAM,uBACNY,SAAU,OACVX,MAAO,mBAEP,CACAC,GAAI,EACJF,KAAM,oBACNY,SAAU,mBACVX,MAAO,yBAEP,CACAC,GAAI,EACJF,KAAM,sBACNY,SAAU,YACVX,MAAO,qBAEP,CACAC,GAAI,EACJF,KAAM,uBACNY,SAAU,gBACVX,MAAO,sBAEP,CACAC,GAAI,EACJF,KAAM,uBACNY,SAAU,YACVX,MAAO,yBAEP,CACAC,GAAI,EACJF,KAAM,6BACNY,SAAU,cACVX,MAAO,0BCzCQY,G,WAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SACzBC,OAAQ,kBACRC,OAAQ,UACHJ,EAAMK,YC6BAC,E,kDA5Bf,aAAe,IAAD,8BACV,gBAMRC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SANtC,EAAKC,MAAQ,CACTpB,OAAQA,EACRiB,YAAa,IAJP,E,qDAWR,IAAD,EAC2BI,KAAKD,MAA7BpB,EADH,EACGA,OAAQiB,EADX,EACWA,YACVK,EAAiBtB,EAAOuB,QAAO,SAAAvB,GACjC,OAAOA,EAAOP,KAAK+B,cAAcC,SAASR,EAAYO,kBAE1D,OAAQxB,EAAO0B,OAGX,yBAAK9B,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUI,OAAQsB,MAL7B,2C,GAlBaK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACD,kBAAC,EAAD,MACNC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a6200571.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","export const robots = [\r\n{\r\nid: 1,\r\nname: 'Sabina Rodáková',\r\nusername: 'Sabi',\r\nemail: 'rodakova.sabina@gmail.com'\r\n},\r\n{\r\nid: 2,\r\nname: 'Tomáš Strnad',\r\nusername: 'Tommy',\r\nemail: 'tomas.strnados@gmail.com'\r\n},\r\n{\r\nid: 3,\r\nname: 'Tomáš Marný',\r\nusername: 'Marnák',\r\nemail: 'velký.marnák@gmail.com'\r\n},\r\n{\r\nid: 4,\r\nname: 'Jiří Moravec',\r\nusername: 'More',\r\nemail: 'jirik@gmail.com'\r\n},\r\n{\r\nid: 5,\r\nname: 'Jiři Mudroch',\r\nusername: 'Líňák',\r\nemail: 'linymudroch@gmail.com'\r\n},\r\n{\r\nid: 6,\r\nname: 'Petr Táborský',\r\nusername: 'Gingerboy',\r\nemail: 'taborak@gmail.com'\r\n},\r\n{\r\nid: 7,\r\nname: 'Ondřej Netík',\r\nusername: 'Internetík',\r\nemail: 'netík@gmail.com'\r\n},\r\n{\r\nid: 8,\r\nname: 'Vendula Moravcová',\r\nusername: 'Odlvirgin',\r\nemail: 'stara.panna@gmail.com'\r\n},\r\n{\r\nid: 9,\r\nname: 'Veronika Mlčochová',\r\nusername: 'Mlčoch',\r\nemail: 'letsbequiet@gmail.com'\r\n},\r\n]","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflowY: 'scroll', \r\n        border: '1px solid black', \r\n        height: '900px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport { robots } from '../robots';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\nonSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\nrender() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robots =>{\r\n        return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    return !robots.length ?\r\n     <h1>Loading</h1> :\r\n     (\r\n        <div className='tc'>\r\n            <h1 className='f1'>Robofriends</h1>\r\n            <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n            </Scroll>\r\n        </div>\r\n     )\r\n    }\r\n}\r\n    export default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n        <App /> \n, document.getElementById('root'))\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}